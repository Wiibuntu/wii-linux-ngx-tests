--- arch/powerpc/platforms/embedded6xx/wii.c
+++ arch/powerpc/platforms/embedded6xx/wii.c
@@ -18,18 +18,25 @@
 #include <linux/init.h>
 #include <linux/irq.h>
 #include <linux/seq_file.h>
+#include <linux/kexec.h>
 #include <linux/of_platform.h>
 #include <linux/memblock.h>
 #include <mm/mmu_decl.h>
+#include <linux/exi.h>
+#include <linux/gpio.h>
 
 #include <asm/io.h>
 #include <asm/machdep.h>
 #include <asm/prom.h>
 #include <asm/time.h>
+#include <asm/starlet.h>
+#include <asm/starlet-ios.h>
+#include <asm/starlet-mini.h>
 #include <asm/udbg.h>
 
 #include "flipper-pic.h"
 #include "hlwd-pic.h"
+#include "gcnvi_udbg.h"
 #include "usbgecko_udbg.h"
 
 /* control block */
@@ -56,6 +63,8 @@ static void __iomem *hw_gpio;
 unsigned long wii_hole_start;
 unsigned long wii_hole_size;
 
+static enum starlet_ipc_flavour starlet_ipc_flavour;
+
 
 static int __init page_aligned(unsigned long x)
 {
@@ -158,8 +167,42 @@ static void __init wii_setup_arch(void)
 		clrbits32(hw_gpio + HW_GPIO_OUT(0),
 			  HW_GPIO_SLOT_LED | HW_GPIO_SENSOR_BAR);
 	}
+
+	ug_udbg_init();
+	gcnvi_udbg_init();
+	starlet_discover_ipc_flavour();
+}
+
+#ifdef CONFIG_STARLET_IOS
+static void wii_restart(char *cmd)
+{
+	local_irq_disable();
+
+	/* try first to launch The Homebrew Channel... */
+	starlet_es_reload_ios_and_launch(STARLET_TITLE_HBC_V107);
+	starlet_es_reload_ios_and_launch(STARLET_TITLE_HBC_JODI);
+	starlet_es_reload_ios_and_launch(STARLET_TITLE_HBC_HAXX);
+	/* ..and if that fails, try an assisted restart */
+	starlet_stm_restart();
+
+	/* fallback to spinning until the power button pressed */
+	for (;;)
+		cpu_relax();
+ }
+
+static void wii_power_off(void)
+{
+	local_irq_disable();
+
+	/* try an assisted poweroff */
+	starlet_stm_power_off();
+
+	/* fallback to spinning until the power button pressed */
+	for (;;)
+		cpu_relax();
 }
 
+#elif defined CONFIG_STARLET_MINI /* end of CONFIG_STARLET_IOS */
 static void wii_restart(char *cmd)
 {
 	local_irq_disable();
@@ -184,6 +227,7 @@ static void wii_power_off(void)
 	}
 	wii_spin();
 }
+#endif /* CONFIG_STARLET_MINI */
 
 static void wii_halt(void)
 {
@@ -200,7 +244,9 @@ static void __init wii_init_early(void)
 static void __init wii_pic_probe(void)
 {
 	flipper_pic_probe();
+#ifdef CONFIG_HLWD_PIC
 	hlwd_pic_probe();
+#endif
 }
 
 static int __init wii_probe(void)
@@ -216,9 +262,117 @@ static int __init wii_probe(void)
 	return 1;
 }
 
+static void wii_show_cpuinfo(struct seq_file *m)
+{
+	seq_printf(m, "vendor\t\t: IBM\n");
+	seq_printf(m, "machine\t\t: Nintendo Wii\n");
+}
+
+int starlet_discover_ipc_flavour(void)
+{
+	struct mipc_infohdr *hdrp;
+	int error;
+
+	error = mipc_discover(&hdrp);
+
+	if (!error) {
+		starlet_ipc_flavour = STARLET_IPC_MINI;
+	} else {
+		starlet_ipc_flavour = STARLET_IPC_IOS;
+	}
+
+	ppc_md.restart = wii_restart;
+
+	return 0;
+}
+
+enum starlet_ipc_flavour starlet_get_ipc_flavour(void)
+{
+	return starlet_ipc_flavour;
+}
+EXPORT_SYMBOL_GPL(starlet_get_ipc_flavour);
+
+#ifdef CONFIG_KEXEC
+
+static int restore_lowmem_stub(struct kimage *image)
+{
+	struct device_node *node;
+	struct resource res;
+	const unsigned long *prop;
+	unsigned long dst, src;
+	size_t size;
+	int error;
+
+	node = of_find_node_by_name(NULL, "lowmem-stub");
+	if (!node) {
+		printk(KERN_ERR "unable to find node %s\n", "lowmem-stub");
+		error = -ENODEV;
+		goto out;
+	}
+
+	error = of_address_to_resource(node, 0, &res);
+	if (error) {
+		printk(KERN_ERR "no lowmem-stub range found\n");
+	  goto out_put;
+	}
+	dst = res.start;
+	size = res.end - res.start + 1;
+
+	prop = of_get_property(node, "save-area", NULL);
+	if (!prop) {
+		printk(KERN_ERR "unable to find %s property\n", "save-area");
+		error = -EINVAL;
+		goto out_put;
+	}
+	src = *prop;
+
+	printk(KERN_DEBUG "lowmem-stub: preparing restore from %08lX to %08lX"
+		" (%u bytes)\n", src, dst, size);
+
+	/* schedule a copy of the lowmem stub to its original location */
+	//error = kimage_add_preserved_region(image, dst, src, PAGE_ALIGN(size));
+
+out_put:
+	of_node_put(node);
+out:
+	return error;
+}
+
+static int wii_machine_kexec_prepare(struct kimage *image)
+{
+	int error;
+
+	error = restore_lowmem_stub(image);
+	if (error)
+		printk(KERN_ERR "%s: error %d\n", __func__, error);
+	return error;
+}
+
+static void wii_machine_kexec(struct kimage *image)
+{
+	local_irq_disable();
+
+#ifdef CONFIG_STARLET_IOS
+	/*
+	 * Reload IOS to make sure that I/O resources are freed before
+	 * the final kexec phase.
+	 */
+	if (starlet_get_ipc_flavour() == STARLET_IPC_IOS)
+		starlet_es_reload_ios_and_discard();
+#endif
+
+	default_machine_kexec(image);
+}
+
+#endif /* CONFIG_KEXEC */
+
+
 static void wii_shutdown(void)
 {
+#ifdef CONFIG_HLWD_PIC
 	hlwd_quiesce();
+#endif
+	exi_quiesce();
 	flipper_quiesce();
 }
 
@@ -228,25 +382,45 @@ define_machine(wii) {
 	.init_early		= wii_init_early,
 	.setup_arch		= wii_setup_arch,
 	.restart		= wii_restart,
+	.show_cpuinfo		= wii_show_cpuinfo,
 	.halt			= wii_halt,
 	.init_IRQ		= wii_pic_probe,
 	.get_irq		= flipper_pic_get_irq,
 	.calibrate_decr		= generic_calibrate_decr,
 	.progress		= udbg_progress,
 	.machine_shutdown	= wii_shutdown,
+#ifdef CONFIG_KEXEC	/* REMOVE THIS (as of 2.6.39)? */
+	.machine_kexec_prepare	= wii_machine_kexec_prepare,
+	.machine_kexec		= wii_machine_kexec,
+#endif
 };
 
 static const struct of_device_id wii_of_bus[] = {
 	{ .compatible = "nintendo,hollywood", },
+#ifdef CONFIG_STARLET_IOS
+	{ .compatible = "nintendo,starlet-ios-ipc", },
+#endif
+#ifdef CONFIG_STARLET_MINI
+	{ .compatible = "twiizers,starlet-mini-ipc", },
+#endif
 	{ },
 };
 
 static int __init wii_device_probe(void)
 {
+	struct device_node *np;
+
 	if (!machine_is(wii))
 		return 0;
 
 	of_platform_bus_probe(NULL, wii_of_bus, NULL);
+
+	np = of_find_compatible_node(NULL, NULL, "nintendo,hollywood-mem2");
+	if (np) {
+		of_platform_device_create(np, NULL, NULL);
+		of_node_put(np);
+	}
+
 	return 0;
 }
 device_initcall(wii_device_probe);
